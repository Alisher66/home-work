// Просуммируйте все числа в массиве (в F # и Haskell вы получите список), кроме самого высокого и самого низкого элементов (значение, а не индекс!).
// (Самый высокий / самый низкий элемент - это соответственно только один элемент на каждом краю, даже если их более одного с одинаковым значением!)

// Пример:

// {6, 2, 1, 8, 10} => 16
// {1, 1, 11, 2, 3} => 6

// Если массив пуст, null или None, или если существует только 1 элемент, верните 0.
// Примечание. В C ++ вместо null используется пустой вектор. В C нет нуля. ;-)


// - В Haskell нет null, поэтому используется Maybe [Int]. Ничто не представляет собой null.
// Получайте удовольствие от кодирования и, пожалуйста, не забудьте проголосовать и оценить это ката! :-)

// Я создал другие ката. Посмотрите, нравится ли вам кодирование и вызовы.


function sumArray(array) {
    let sum = 0;
    if (array == null) {
        return 0;
    } else if (array.length ==1) return array[0];
    let min = max = array[0];
    for (el of array) {
        min = Math.min(min, el);
        max = Math.max(max, el);
    }
    if (array.length == 2) {
        return min + max;
    } else {
        for (el of array) {
            if (el != min && el != max) {
                sum += el;
            }
        }
    }

    return sum
}

console.log(sumArray([1,2]))
